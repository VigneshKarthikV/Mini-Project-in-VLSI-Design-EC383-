
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /home/vignesh/.volare/sky130B/libs.ref/sky130_sram_macros/lib/sky130_sram_1kbyte_1rw1r_32x256_8_TT_1p8V_25C.lib
Imported 1 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/designs/ci/test_sram_macro/src/test_sram_macro.v
Parsing SystemVerilog input from `/openlane/designs/designs/ci/test_sram_macro/src/test_sram_macro.v' to AST representation.
Generating RTLIL representation for module `\test_sram_macro_unwrapped'.
Generating RTLIL representation for module `\test_sram_macro'.
Successfully finished Verilog frontend.

3. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/designs/ci/test_sram_macro/runs/RUN_2024.02.03_10.58.21/tmp/synthesis/hierarchy.dot'.
Dumping module test_sram_macro to page 1.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \test_sram_macro
Used module:     \test_sram_macro_unwrapped

4.2. Analyzing design hierarchy..
Top module:  \test_sram_macro
Used module:     \test_sram_macro_unwrapped
Removed 0 unused modules.
Renaming module test_sram_macro to test_sram_macro.

5. Executing TRIBUF pass.

6. Executing HIERARCHY pass (managing design hierarchy).

6.1. Analyzing design hierarchy..
Top module:  \test_sram_macro
Used module:     \test_sram_macro_unwrapped

6.2. Analyzing design hierarchy..
Top module:  \test_sram_macro
Used module:     \test_sram_macro_unwrapped
Removed 0 unused modules.

7. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/designs/ci/test_sram_macro/src/test_sram_macro.v:31$1 in module test_sram_macro_unwrapped.
Removed a total of 0 dead cases.

9. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

10. Executing PROC_INIT pass (extract init attributes).

11. Executing PROC_ARST pass (detect async resets in processes).

12. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

13. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\test_sram_macro_unwrapped.$proc$/openlane/designs/designs/ci/test_sram_macro/src/test_sram_macro.v:31$1'.
     1/2: $0\cs_int[0:0]
     2/2: $0\dataout_stored[63:0]

14. Executing PROC_DLATCH pass (convert process syncs to latches).

15. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\test_sram_macro_unwrapped.\dataout_stored' using process `\test_sram_macro_unwrapped.$proc$/openlane/designs/designs/ci/test_sram_macro/src/test_sram_macro.v:31$1'.
  created $dff cell `$procdff$16' with positive edge clock.
Creating register for signal `\test_sram_macro_unwrapped.\cs_int' using process `\test_sram_macro_unwrapped.$proc$/openlane/designs/designs/ci/test_sram_macro/src/test_sram_macro.v:31$1'.
  created $dff cell `$procdff$17' with positive edge clock.

16. Executing PROC_MEMWR pass (convert process memory writes to cells).

17. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\test_sram_macro_unwrapped.$proc$/openlane/designs/designs/ci/test_sram_macro/src/test_sram_macro.v:31$1'.
Removing empty process `test_sram_macro_unwrapped.$proc$/openlane/designs/designs/ci/test_sram_macro/src/test_sram_macro.v:31$1'.
Cleaned up 2 empty switches.

18. Executing CHECK pass (checking for obvious problems).
Checking module test_sram_macro...
Checking module test_sram_macro_unwrapped...
Found and reported 0 problems.

19. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_sram_macro.
Optimizing module test_sram_macro_unwrapped.
<suppressed ~2 debug messages>

20. Executing FLATTEN pass (flatten design).
Deleting now unused module test_sram_macro_unwrapped.
<suppressed ~1 debug messages>

21. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_sram_macro.

22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_sram_macro..
Removed 1 unused cells and 7 unused wires.
<suppressed ~2 debug messages>

23. Executing OPT pass (performing simple optimizations).

23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_sram_macro.

23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_sram_macro'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test_sram_macro..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test_sram_macro.
Performed a total of 0 changes.

23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_sram_macro'.
Removed a total of 0 cells.

23.6. Executing OPT_DFF pass (perform DFF optimizations).

23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_sram_macro..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_sram_macro.

23.9. Rerunning OPT passes. (Maybe there is more to do..)

23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test_sram_macro..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test_sram_macro.
Performed a total of 0 changes.

23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_sram_macro'.
Removed a total of 0 cells.

23.13. Executing OPT_DFF pass (perform DFF optimizations).

23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_sram_macro..

23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_sram_macro.

23.16. Finished OPT passes. (There is nothing left to do.)

24. Executing FSM pass (extract and optimize FSM).

24.1. Executing FSM_DETECT pass (finding FSMs in design).

24.2. Executing FSM_EXTRACT pass (extracting FSM from design).

24.3. Executing FSM_OPT pass (simple optimizations of FSMs).

24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_sram_macro..

24.5. Executing FSM_OPT pass (simple optimizations of FSMs).

24.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

24.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

24.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_sram_macro.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_sram_macro'.
Removed a total of 0 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test_sram_macro..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test_sram_macro.
Performed a total of 0 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_sram_macro'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\submodule.$procdff$17 ($dff) from module test_sram_macro (D = \cs, Q = \submodule.cs_int, rval = 1'1).
Adding SRST signal on $flatten\submodule.$procdff$16 ($dff) from module test_sram_macro (D = $flatten\submodule.$procmux$11_Y, Q = \submodule.dataout_stored, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$19 ($sdff) from module test_sram_macro (D = \submodule.dataout_int, Q = \submodule.dataout_stored).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_sram_macro..
Removed 3 unused cells and 3 unused wires.
<suppressed ~4 debug messages>

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_sram_macro.

25.9. Rerunning OPT passes. (Maybe there is more to do..)

25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test_sram_macro..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test_sram_macro.
Performed a total of 0 changes.

25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_sram_macro'.
Removed a total of 0 cells.

25.13. Executing OPT_DFF pass (perform DFF optimizations).

25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_sram_macro..

25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_sram_macro.

25.16. Finished OPT passes. (There is nothing left to do.)

26. Executing WREDUCE pass (reducing word size of cells).

27. Executing PEEPOPT pass (run peephole optimizers).

28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_sram_macro..

29. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module test_sram_macro:
  created 0 $alu and 0 $macc cells.

30. Executing SHARE pass (SAT-based resource sharing).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_sram_macro.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_sram_macro'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test_sram_macro..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test_sram_macro.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_sram_macro'.
Removed a total of 0 cells.

31.6. Executing OPT_DFF pass (perform DFF optimizations).

31.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_sram_macro..

31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_sram_macro.

31.9. Finished OPT passes. (There is nothing left to do.)

32. Executing MEMORY pass.

32.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

32.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

32.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

32.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

32.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

32.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_sram_macro..

32.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

32.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

32.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_sram_macro..

32.10. Executing MEMORY_COLLECT pass (generating $mem cells).

33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_sram_macro..

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_sram_macro.

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_sram_macro'.
Removed a total of 0 cells.

34.3. Executing OPT_DFF pass (perform DFF optimizations).

34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_sram_macro..

34.5. Finished fast OPT passes.

35. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_sram_macro.

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_sram_macro'.
Removed a total of 0 cells.

36.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test_sram_macro..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

36.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test_sram_macro.
Performed a total of 0 changes.

36.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_sram_macro'.
Removed a total of 0 cells.

36.6. Executing OPT_SHARE pass.

36.7. Executing OPT_DFF pass (perform DFF optimizations).

36.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_sram_macro..

36.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_sram_macro.

36.10. Finished OPT passes. (There is nothing left to do.)

37. Executing TECHMAP pass (map to technology primitives).

37.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

37.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~78 debug messages>

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_sram_macro.

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_sram_macro'.
Removed a total of 0 cells.

38.3. Executing OPT_DFF pass (perform DFF optimizations).

38.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_sram_macro..

38.5. Finished fast OPT passes.

39. Executing ABC pass (technology mapping using ABC).

39.1. Extracting gate netlist of module `\test_sram_macro' to `<abc-temp-dir>/input.blif'..
Extracted 66 gates and 197 wires to a netlist network with 131 inputs and 66 outputs.

39.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

39.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        2
ABC RESULTS:               MUX cells:       64
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:      131
ABC RESULTS:          output signals:       66
Removing temp directory.

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_sram_macro.

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_sram_macro'.
Removed a total of 0 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_sram_macro..
Removed 0 unused cells and 197 unused wires.
<suppressed ~1 debug messages>

40.5. Finished fast OPT passes.

41. Executing HIERARCHY pass (managing design hierarchy).

41.1. Analyzing design hierarchy..
Top module:  \test_sram_macro

41.2. Analyzing design hierarchy..
Top module:  \test_sram_macro
Removed 0 unused modules.

42. Printing statistics.

=== test_sram_macro ===

   Number of wires:                 22
   Number of wire bits:            491
   Number of public wires:          20
   Number of public wire bits:     489
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                133
     $_MUX_                         64
     $_NOT_                          2
     $_SDFFE_PN0P_                  64
     $_SDFF_PN1_                     1
     sky130_sram_1kbyte_1rw1r_32x256_8      2

43. Executing CHECK pass (checking for obvious problems).
Checking module test_sram_macro...
Found and reported 0 problems.

44. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/designs/ci/test_sram_macro/runs/RUN_2024.02.03_10.58.21/tmp/synthesis/post_techmap.dot'.
Dumping module test_sram_macro to page 1.

45. Executing SHARE pass (SAT-based resource sharing).

46. Executing OPT pass (performing simple optimizations).

46.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_sram_macro.

46.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_sram_macro'.
Removed a total of 0 cells.

46.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test_sram_macro..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

46.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test_sram_macro.
Performed a total of 0 changes.

46.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_sram_macro'.
Removed a total of 0 cells.

46.6. Executing OPT_DFF pass (perform DFF optimizations).

46.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_sram_macro..

46.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_sram_macro.

46.9. Finished OPT passes. (There is nothing left to do.)

47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_sram_macro..
Removed 0 unused cells and 8 unused wires.
<suppressed ~8 debug messages>

48. Printing statistics.

=== test_sram_macro ===

   Number of wires:                 14
   Number of wire bits:            343
   Number of public wires:          12
   Number of public wire bits:     341
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                133
     $_MUX_                         64
     $_NOT_                          2
     $_SDFFE_PN0P_                  64
     $_SDFF_PN1_                     1
     sky130_sram_1kbyte_1rw1r_32x256_8      2

mapping tbuf

49. Executing TECHMAP pass (map to technology primitives).

49.1. Executing Verilog-2005 frontend: /home/vignesh/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/vignesh/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

49.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

50. Executing SIMPLEMAP pass (map simple cells to gate primitives).

51. Executing TECHMAP pass (map to technology primitives).

51.1. Executing Verilog-2005 frontend: /home/vignesh/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/vignesh/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

52. Executing SIMPLEMAP pass (map simple cells to gate primitives).

53. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

53.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\test_sram_macro':
  mapped 65 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

54. Printing statistics.

=== test_sram_macro ===

   Number of wires:                143
   Number of wire bits:            472
   Number of public wires:          12
   Number of public wire bits:     341
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                262
     $_MUX_                        193
     $_NOT_                          2
     sky130_fd_sc_hd__dfxtp_2       65
     sky130_sram_1kbyte_1rw1r_32x256_8      2

[INFO]: USING STRATEGY AREA 0

55. Executing ABC pass (technology mapping using ABC).

55.1. Extracting gate netlist of module `\test_sram_macro' to `/tmp/yosys-abc-IgYZaT/input.blif'..
Extracted 195 gates and 329 wires to a netlist network with 132 inputs and 131 outputs.

55.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-IgYZaT/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-IgYZaT/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-IgYZaT/input.blif 
ABC: + read_lib -w /openlane/designs/designs/ci/test_sram_macro/runs/RUN_2024.02.03_10.58.21/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.08 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/designs/ci/test_sram_macro/runs/RUN_2024.02.03_10.58.21/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.11 sec
ABC: Memory =    9.54 MB. Time =     0.11 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/designs/ci/test_sram_macro/runs/RUN_2024.02.03_10.58.21/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/designs/ci/test_sram_macro/runs/RUN_2024.02.03_10.58.21/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 25000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 25000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 25000.0 
ABC: Current delay (786.91 ps) does not exceed the target delay (25000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 25000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    287 ( 32.8 %)   Cap = 13.9 ff (  8.1 %)   Area =     2120.78 ( 67.2 %)   Delay =  1294.61 ps  ( 44.3 %)               
ABC: Path  0 --     131 : 0    1 pi                      A =   0.00  Df =   8.2   -5.1 ps  S =  17.7 ps  Cin =  0.0 ff  Cout =   2.2 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     267 : 1   10 sky130_fd_sc_hd__buf_1  A =   3.75  Df = 266.7  -98.7 ps  S = 316.9 ps  Cin =  2.1 ff  Cout =  26.6 ff  Cmax = 130.0 ff  G = 1211  
ABC: Path  2 --     268 : 1   10 sky130_fd_sc_hd__buf_1  A =   3.75  Df = 637.6 -220.0 ps  S = 396.2 ps  Cin =  2.1 ff  Cout =  33.5 ff  Cmax = 130.0 ff  G = 1528  
ABC: Path  3 --     269 : 3    1 sky130_fd_sc_hd__mux2_2 A =  11.26  Df = 973.8 -209.1 ps  S =  45.6 ps  Cin =  2.3 ff  Cout =   2.2 ff  Cmax = 297.6 ff  G =   92  
ABC: Path  4 --     270 : 1    1 sky130_fd_sc_hd__buf_1  A =   3.75  Df =1294.6 -311.0 ps  S = 396.4 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi130 (\submodule.cs_int).  End-point = po2 (\dataout [0]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  132/  131  lat =    0  nd =   287  edge =    672  area =2120.68  delay = 4.00  lev = 4
ABC: + write_blif /tmp/yosys-abc-IgYZaT/output.blif 

55.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:       64
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       92
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       64
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       64
ABC RESULTS:        internal signals:       66
ABC RESULTS:           input signals:      132
ABC RESULTS:          output signals:      131
Removing temp directory.

56. Executing SETUNDEF pass (replace undef values with defined constants).

57. Executing HILOMAP pass (mapping to constant drivers).

58. Executing SPLITNETS pass (splitting up multi-bit signals).

59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_sram_macro..
Removed 0 unused cells and 327 unused wires.
<suppressed ~1 debug messages>

60. Executing INSBUF pass (insert buffer cells for connected wires).

61. Executing CHECK pass (checking for obvious problems).
Checking module test_sram_macro...
Warning: Wire test_sram_macro.\dataout [63] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [62] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [61] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [60] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [59] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [58] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [57] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [56] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [55] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [54] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [53] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [52] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [51] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [50] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [49] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [48] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [47] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [46] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [45] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [44] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [43] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [42] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [41] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [40] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [39] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [38] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [37] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [36] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [35] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [34] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [33] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [32] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [31] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [30] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [29] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [28] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [27] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [26] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [25] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [24] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [23] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [22] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [21] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [20] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [19] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [18] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [17] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [16] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [15] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [14] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [13] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [12] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [11] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [10] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [9] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [8] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [7] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [6] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [5] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [4] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [3] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [2] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [1] is used but has no driver.
Warning: Wire test_sram_macro.\dataout [0] is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:39:hilomap_worker$881 is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:47:hilomap_worker$879 is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:47:hilomap_worker$877 is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:47:hilomap_worker$875 is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:47:hilomap_worker$873 is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:47:hilomap_worker$871 is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:47:hilomap_worker$869 is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:47:hilomap_worker$867 is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:47:hilomap_worker$865 is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:47:hilomap_worker$863 is used but has no driver.
Warning: Wire test_sram_macro.$abc$229$flatten\submodule.$logic_not$/openlane/designs/designs/ci/test_sram_macro/src/test_sram_macro.v:50$5_Y is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:39:hilomap_worker$861 is used but has no driver.
Warning: Wire test_sram_macro.$abc$229$flatten\submodule.$logic_not$/openlane/designs/designs/ci/test_sram_macro/src/test_sram_macro.v:49$4_Y is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:47:hilomap_worker$859 is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:47:hilomap_worker$857 is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:47:hilomap_worker$855 is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:47:hilomap_worker$853 is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:47:hilomap_worker$851 is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:47:hilomap_worker$849 is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:47:hilomap_worker$847 is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:47:hilomap_worker$845 is used but has no driver.
Warning: Wire test_sram_macro.$auto$hilomap.cc:47:hilomap_worker$843 is used but has no driver.
Found and reported 86 problems.

62. Printing statistics.

=== test_sram_macro ===

   Number of wires:                444
   Number of wire bits:            584
   Number of public wires:         201
   Number of public wire bits:     341
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                374
     sky130_fd_sc_hd__buf_1         92
     sky130_fd_sc_hd__conb_1        20
     sky130_fd_sc_hd__dfxtp_2       65
     sky130_fd_sc_hd__inv_2          2
     sky130_fd_sc_hd__mux2_2        64
     sky130_fd_sc_hd__nand2_2        1
     sky130_fd_sc_hd__o211a_2       64
     sky130_fd_sc_hd__or2_2         64
     sky130_sram_1kbyte_1rw1r_32x256_8      2

   Chip area for module '\test_sram_macro': 385003.532000

63. Executing Verilog backend.
Dumping module `\test_sram_macro'.

64. Executing JSON backend.

Warnings: 86 unique messages, 86 total
End of script. Logfile hash: b3a761b508, CPU: user 0.35s system 0.02s, MEM: 29.64 MB peak
Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)
Time spent: 49% 2x abc (0 sec), 18% 4x stat (0 sec), ...
